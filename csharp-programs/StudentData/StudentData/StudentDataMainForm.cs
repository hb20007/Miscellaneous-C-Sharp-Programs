/// <file>
/// <author>hb20007</author>
/// <datecreated>2016-11-19</datecreated>
/// <summary>
///  Contains the part of the class StudentDataMainForm with the non-autogenerated code
/// </summary>
/// </file>
using System;
using System.Windows.Forms;
using System.Threading;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Globalization;

namespace StudentData
{
    partial class StudentDataMainForm : Form
    {
        public StudentDataMainForm()
        {
            this.InitializeComponent();
            this.loadDataIntoListBox();
            this.loadDataIntoComboBox();
        }

        /// <summary>
        /// Displays message that the student's record has successfully been added to the database
        /// </summary>
        private void displaySuccessMessage()
        {
            MessageBox.Show("Record successfully added!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        /// <summary>
        /// Launches a new AllStudentsForm
        /// </summary>
        private void allStudentsFormStart()
        {
            Application.Run(new AllStudentsForm());
        }

        /// <summary>
        /// Loads data into the majors list box from file
        /// </summary>
        private void loadDataIntoListBox()
        {
            try
            {
                StreamReader reader = new StreamReader(File.OpenRead(Utilities.MAJORS_FILE_NAME));
                string line = reader.ReadLine(); // All data in the .csv file is on 1 line so while (!reader.EndOfStream) is not required
                string[] values = line.Split(',');
                foreach (string datum in values)
                    this.majorListBox.Items.Add(datum);
                reader.Close();
            }
            catch (FileNotFoundException)
            {
                MessageBox.Show($"The file  {Utilities.MAJORS_FILE_NAME}  was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(1); // Application.Exit() and this.Close() do not work here (because this code runs before this.InitializeComponent() probably)
            }
        }

        /// <summary>
        /// Loads data into the universities combo box from file
        /// </summary>
        private void loadDataIntoComboBox()
        {
            try
            {
                StreamReader reader = new StreamReader(File.OpenRead(Utilities.UNIVERSITIES_FILE_NAME));
                string line = reader.ReadLine(); // All data in the .csv file is on 1 line so while (!reader.EndOfStream) is not required
                string[] values = line.Split(',');
                foreach (string datum in values)
                    this.universityComboBox.Items.Add(datum);
                reader.Close();
            }
            catch
            {
                MessageBox.Show($"The file { Utilities.UNIVERSITIES_FILE_NAME} was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(1); // Application.Exit() and this.Close() do not work here (because this code runs before this.InitializeComponent() probably)
            }
        }

        /// <summary>
        /// When a new entry is added to the .csv file with the list of universities, the combo box will be updated to add it to its items
        /// </summary>
        private void addNewEntryToComboBox()
        {
            try
            {
                StreamReader reader = new StreamReader(File.OpenRead(Utilities.UNIVERSITIES_FILE_NAME));
                string line = reader.ReadLine();
                string[] values = line.Split(',');
                this.universityComboBox.Items.Add(values[values.Length - 1]); // values.Length - 1 is the index of the last string in the values string array
                reader.Close();
            }
            catch
            {
                MessageBox.Show($"The file {Utilities.UNIVERSITIES_FILE_NAME} was not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(1); // Application.Exit() and this.Close() do not work here (because this code runs before this.InitializeComponent() probably)
            }
        }

        /// <summary>
        /// If the user inserts text with the required number of characters, he is taken to the next TextBox
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void studentIDTextBox_TextChanged(object sender, EventArgs e)
        {
            if (this.studentIDTextBox.Text.Length == this.studentIDTextBox.MaxLength)
                SendKeys.Send("{TAB}");
        }

        /// <summary>
        /// Displays a form with all the students entered so far
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void showAllStudentsToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            AllStudentsForm allStudentDataForm = new AllStudentsForm();
            Thread allStudentsDataThread = new Thread(new ThreadStart(this.allStudentsFormStart));
            allStudentsDataThread.Start();
        }

        /// <summary>
        /// Exits the application
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// Displays a form allowing you to add a new university to the list of universities so that it will be visible in the combo box drop-down
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void addUniversityToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            AddUniversityForm addUniForm = new AddUniversityForm();
            if (addUniForm.ShowDialog() == DialogResult.OK) // DialogResult.OK has been assigned to the Add button in the custom dialog box to add a university
                this.addNewEntryToComboBox();
        }

        /// <summary>
        /// Displays the About box
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void aboutToolStripMenuItem_Click(object sender, System.EventArgs e)
        {
            StudentDataAboutBox aboutBox = new StudentDataAboutBox();
            aboutBox.ShowDialog();
        }

        /// <summary>
        /// Resets the form to its initial state
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void clearButton_Click(object sender, System.EventArgs e)
        {
            this.clearAllFields();
        }

        /// <summary>
        /// Validates the entries and if valid they are added to the database
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void okButton_Click(object sender, System.EventArgs e)
        {
            string errorMessage = String.Empty;

            Object[] emptyControlAndItsNameArray = new Object[2];
            emptyControlAndItsNameArray = this.EmptyControlAndItsName(); 
            if (emptyControlAndItsNameArray != null) { // That is if there is a field that was left empty
                Control emptyControl = (Control)emptyControlAndItsNameArray[0];
                string nameOfEmptyField = (string)emptyControlAndItsNameArray[1];
                errorMessage = $"{nameOfEmptyField} cannot be left empty.";
                emptyControl.Focus();
            }
            else // More checks
            {
                Regex studentIDRegex = new Regex(@"^[U][0-9][0-9][0-9][N]\d\d\d\d$", RegexOptions.IgnoreCase); // [0-9] and \d are equivalent. Using RegexOptions.CaseIgnore() instead of [Uu] etc. Small letter U and N are acceptable because they later will be converted to upper case via .ToUpper() when the student ID is stored in a Student object
                if (!studentIDRegex.IsMatch(this.studentIDTextBox.Text.Trim()))
                    errorMessage = this.studentDataMainFormToolTip.GetToolTip(this.studentIDLabel);
                else // More checks
                {
                    Regex nameRegex = new Regex(@"^[A-Za-z][A-Za-z]+$"); // Minimum length of a name is 2 characters. Case is ignored here and is formatted correctly letter when the name is added to a Student object. Using RegexOptions.CaseIgnore()
                    if (!nameRegex.IsMatch(this.firstNameTextBox.Text.Trim()))
                        errorMessage = $"{this.firstNameLabel.Text.Substring(0, this.firstNameLabel.Text.Length - 1)} must only contain letters and must be at least two characters long.";
                    else if (!nameRegex.IsMatch(this.lastNameTextBox.Text.Trim()))
                        errorMessage = $"{this.lastNameLabel.Text.TrimEnd(':')} must only contain letters and must be at least two characters long."; // Using .TrimEnd()
                    else if (!Regex.IsMatch(this.universityComboBox.Text.Trim(), @"^[A-Za-z]+\s[A-Za-z\s]*[A-Za-z]+$"))
                        errorMessage = $"{this.universityLabel.Text.Substring(0, this.universityLabel.Text.Length - 1)} must only contain letters and must be at least two distinct words long."; // Using Regex.IsMatch() 
                }
            }

            if (errorMessage != String.Empty) // If there is an error
                MessageBox.Show(errorMessage, "Message", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); // Using string interpolation
            else // If there is no error
            {
                this.addUniversityIfNew();
                this.actionOnInputValidated();
            }
        }

        /// <summary>
        /// If the valid entry of the user is new, it is added to the .csv list of students, a message is shown indicating the success of the operation, and the fields are cleared
        /// </summary>
        private void actionOnInputValidated()
        {
            if (Utilities.isStudentNew(this.studentIDTextBox.Text.Trim().ToUpper())) // ToUpper() is neccessary here because u144n0959 should not be considered new if U144N0959 exists etc
            {
                string formattedStudentID = this.studentIDTextBox.Text.Trim().ToUpper();
                string formattedFirstName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(this.firstNameTextBox.Text.Trim().ToLower()); // .ToLower() is important because if the text was entered as all-caps, .ToTitleCase() would be okay with it and would not format it.
                string formattedLastName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(this.lastNameTextBox.Text.Trim().ToLower());
                // University name is not given TitleCase because some words should not be capitalized eg. Of
                Student newStud = new Student(formattedStudentID, formattedFirstName, formattedLastName, this.majorListBox.Text, this.universityComboBox.Text.Trim(), this.getStandingAsEnum(), this.deansListCheckBox.Checked);
                Utilities.addStudentToList(newStud);
                this.displaySuccessMessage();
                this.clearAllFields();
            }
            else
            {
                MessageBox.Show(String.Format("A student with student ID {0} already exists in the database.", this.studentIDTextBox.Text.Trim()), "Cannot add student", MessageBoxButtons.OK, MessageBoxIcon.Warning); // Using String.Format() 
            }
        }

        /// <summary>
        /// Returns the standing of the new student as an object of type Utilities.Standings
        /// </summary>
        /// <returns>The standing of the new student as an enum</returns>
        private Utilities.Standings getStandingAsEnum()
        {
            Utilities.Standings studentStanding = Utilities.Standings.Freshman; // Neccessary arbitrary initialization
            foreach (RadioButton radio in this.standingGroupBox.Controls.OfType<RadioButton>())
            {
                if (radio.Checked)
                {
                    studentStanding = (Utilities.Standings)Enum.Parse(typeof(Utilities.Standings), radio.Text);
                    break;
                }
            }
            return studentStanding;
        }

        /// <summary>
        /// Method called when the user presses the OK button and the University in the combo box is not in the list of universities to add it to the .csv file
        /// </summary>
        private void addUniversityIfNew()
        {
            if (Utilities.isUniversityNew(this.universityComboBox.Text.Trim()))
            {
                Utilities.addUniversityToList(this.universityComboBox.Text.Trim());
                this.addNewEntryToComboBox();
            }
        }

        /// <summary>
        /// Clears all fields in the form and sets focus to the first text box
        /// </summary>
        private void clearAllFields()
        {
            this.studentIDTextBox.Clear();
            this.firstNameTextBox.Clear();
            this.lastNameTextBox.Clear();
            this.majorListBox.ClearSelected(); // Equivalent to setting the SelectedIndex Property to -1
            this.universityComboBox.Text = String.Empty;
            this.freshmanRadioButton.Select();
            this.deansListCheckBox.Checked = false;
            this.studentIDTextBox.Focus();
        }

        /// <summary>
        /// Returns the control and name corresponding to the first field detected which the user has not filled in, if any
        /// </summary>
        /// <returns>An Object array of 2 items. The first item is the Control which has been left empty, if any. It will be used to set the focus to that item. The second item is a string with the name of the field the user has left empty. If no field was left empty, returns <code>null</code></returns>
        Object[] EmptyControlAndItsName()
        {
            Object[] toBeReturned = new Object[2];
            if (this.studentIDTextBox.Text.Trim() == String.Empty)
            {
                toBeReturned[0] = this.studentIDTextBox;
                toBeReturned[1] = this.studentIDLabel.Text.Substring(0, this.studentIDLabel.Text.Length - 1); // The Substring() method is needed because we need to remove the last character ':' from the string
            }
            else if (this.firstNameTextBox.Text.Trim() == String.Empty)
            {
                toBeReturned[0] = this.firstNameTextBox;
                toBeReturned[1] = this.firstNameLabel.Text.Substring(0, this.firstNameLabel.Text.Length - 1);
            }
            else if (this.lastNameTextBox.Text.Trim() == String.Empty)
            {
                toBeReturned[0] = this.lastNameTextBox;
                toBeReturned[1] = this.lastNameLabel.Text.Substring(0, this.lastNameLabel.Text.Length - 1);
            }
            else if (this.majorListBox.SelectedIndex == -1)
            {
                toBeReturned[0] = this.majorListBox;
                toBeReturned[1] = this.majorLabel.Text.Substring(0, this.majorLabel.Text.Length - 1);
            }
            else if (this.universityComboBox.Text.Trim() == String.Empty)
            {
                toBeReturned[0] = this.universityComboBox;
                toBeReturned[1] = this.universityLabel.Text.Substring(0, this.universityLabel.Text.Length - 1);
            }
            else
            {
                foreach (RadioButton radio in this.standingGroupBox.Controls.OfType<RadioButton>())
                {
                    if (radio.Checked)
                        break;
                    if (radio == this.seniorRadioButton) // The last one 
                    {
                        toBeReturned[0] = this.freshmanRadioButton; // The focus will be put on the freshman radio button
                        toBeReturned[1] = this.standingLabel.Text.Substring(0, this.standingLabel.Text.Length - 1);
                    }
                }
            }

            if (toBeReturned[0] == null) // ie. if the array remains uninitialized because no error has been found
                return null;
            return toBeReturned;
        }
    }
}