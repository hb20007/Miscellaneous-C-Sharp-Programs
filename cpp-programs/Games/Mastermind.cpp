/*
Arithmie, a game based on Mastermind where the goal of the player is to guess a sequence of numbers randomly generated by the computer
@author Hb20007
version 2.2
*/

#include <iostream>
#include <ctime>
#include <cstdlib>
#include "ColoredTextDisplay.h"
using namespace std;

const int numberOfNumbers = 4;
const int initialFeedback = 0, fullCorrect = 1, halfCorrect = 2;

void fillWithNumber(int *parameter, int length, int number)  // I will use this to initialize all the elements in my feedback array to 0 and the elements in my target array to 1
{
	for (int i = 0; i < length; i++)
	{
		parameter[i] = number;
	}
}

void takeGuess(int array[])
{
	cout << "Insert your guess\n";
	cin >> array[0] >> array[1] >> array[2] >> array[3];
}

int randomNumber()
{
	return (rand() % 9 + 1); //generates random number from 1-9
}

void comparator(int guessArray[], int secretArray[], int feedbackArray[]) // returns a 0 if user's guess is wrong, 1 if correct, and 2 if wrong but the number exists in the secret array
{ 
	fillWithNumber(feedbackArray, numberOfNumbers, initialFeedback); //I initialize the feedback array here and not in main because it needs to be reinitialized to { 0 } everytime comparator() runs
	for (size_t i = 0; i < numberOfNumbers; i++)
	{
		for (size_t j = 0; j < numberOfNumbers; j++)
		{
			if ((guessArray[i]) == secretArray[j]) feedbackArray[i] = halfCorrect;
		}
		if (guessArray[i] == secretArray[i]) feedbackArray[i] = fullCorrect;
	}
}

void processFeedback(int *feedback, int *guess)
{
	for (size_t j = 0; j < numberOfNumbers; j++)
	{
		switch (feedback[j])
		{
		case 0:
			DisplayWithColor(guess[j], Red, Transparent);
			cout << " ";
			break;
		case 1:
			DisplayWithColor(guess[j], Green, Transparent);
			cout << " ";
			break;
		case 2:
			DisplayWithColor(guess[j], Yellow, Transparent);
			cout << " ";
			break;
		}
	}
	cout << endl;
	ResetDisplayColor();
}

bool areSimilar(int *parameter1, int * parameter2, const int length) // returns 1 if the two arrays inserted as parameters are equal with respect to a certain length
{
	for (int i = 0; i < length; i++)
	{
		if (parameter1[i] != parameter2[i]) return false; 
	}
	return true;
}

void fillWithRandomNumber(int *parameter, int length)  // I will use this to initialize all the elements in my feedback array to 0
{
	for (int i = 0; i < length; i++)
	{
		parameter[i] = randomNumber();
	}
}


int main()
{
	srand(static_cast<unsigned int>(time(0))); // static cast to avoid warning message 
	int guess[numberOfNumbers], feedback[numberOfNumbers], random[numberOfNumbers], target[numberOfNumbers], counter = 0;
	fillWithRandomNumber(random, numberOfNumbers);  // I use this function to initialize my array instead of doing so manually to make my code more versatile. Little change is now needed if the number of numbers to guess changes from 4
	fillWithNumber(target, numberOfNumbers, fullCorrect); 
	cout << "Welcome to Arithmie\n";
	cout << "Try to guess my 4 numbers (1-9, repetition allowed) in the least number of moves. Good luck!\n";
	while (!areSimilar(feedback, target, numberOfNumbers))
	{
		takeGuess(guess);
		comparator(guess, random, feedback);
		processFeedback(feedback, guess);
		counter++; 
	}
	cout << "Congratulations! You found the right sequence\n";
	if (counter == 1) cout << "You did it in 1 try. Unbelievable!!!!!\n\n";
	else cout << "You did it in " << counter << " tries\n\n";
	system("pause");
}
